syntax = "proto3";

package org.schemata.schema;

import "google/protobuf/descriptor.proto";

option java_package = "org.schemata.schema";
option java_outer_classname = "SchemataBuilder";

// MessageType captures the type of the stream. There are two types of stream.
enum Type {
  // This is an invalid state. If the entity defined as unknown the validator should throw an exception.
  UNKNOWN = 0;
  //Entity streams can be mutated in the downstream services. Entity streams often used to represent the current
  //state of the entity. In the classical DW concepts Entities typically represents the dimensions.
  // Entity must have a primary key field.
  ENTITY = 1;
  // Event streams are typically immutable in nature. Event streams often used to represent the state change of an Entity.
  // In the classical DW concepts Event streams represents the facts. Event streams will not have a primary key field.
  EVENT = 2;
}

// CommonMetadata is the set of attribute apply to both the Message & Field
message CoreMetadata {
  // Mandatory Metadata: description of the entity
  optional string description = 50001;
  // Optional Metadata: additional comments about the entity
  optional string comment = 50002;
  // Optional Metadata: Any related entity that has "hierarchy" or "has a"  relationships.
  optional string see_also = 50003;
  // Optional Metadata: Additional link reference for further reading.
  // It could be a confluent page, An ADR or RFC or a Slack message link.
  optional string reference = 50004;
}


extend google.protobuf.MessageOptions {

  // message.description is a Mandatory Metadata
  CoreMetadata message_core = 60001;
  // Mandatory Metadata: owner of the entity. Usually it is the team name.
  string owner = 60002;
  // Mandatory Metadata: domain = 'core' indicates the entity is common across all the domains.
  // Other possible domains are `sales`, `marketing`, `product` etc
  string domain = 60003;
  // Mandatory Metadata: define the type of the message.
  Type type = 60004;
  // Status of the entity. You can have `testing`, `production` or `staging` depends on the lifecycle of schema definition.
  string status = 60005;
  // Slack or Teams channel name to communicate with the team which owns ths entity
  string team_channel = 60006;
  // Slack or Teams channel name to alert for any validation errors.
  string alert_channel = 60007;
}

extend google.protobuf.FieldOptions {
  CoreMetadata field_core = 70001;
  bool is_classified = 70002;
  string classification_level = 7003;
  string product_type = 70004;
  bool is_primary_key = 70005;
}

message Department {
  int32 id = 1;
  string name = 2;
}

message Person {
  option(message_core).description = "This is the description of the users table";
  option(message_core).comment = "The comment added after thought";
  option(owner) = "Growth";
  option(domain) = "Core";
  option(type) = ENTITY;

  string name = 1 [(field_core).description = "person name"];
  int32 id = 2 [(field_core).description = "unique identifier for a given person", (is_primary_key) = true];
  string email = 3 [(field_core).description = "official email address", (is_classified) = true, (classification_level) = "HIGH", (product_type) = "email"];
  Department dept = 4 [(field_core).description = "department name of the person"] ;
}
